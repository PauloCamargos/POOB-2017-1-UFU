/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author paulo
 */
public class GUIgerenciador extends javax.swing.JFrame {

    /**
     * Creates new form GUIgerenciador
     */
    public GUIgerenciador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jtfRG = new javax.swing.JTextField();
        jbConsultarLeitores = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableLeitores = new javax.swing.JTable();
        jbInserirLeitores = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        RG = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jtfEndereco = new javax.swing.JTextField();
        jtfTelefone = new javax.swing.JTextField();
        jbUpdateLeitores = new javax.swing.JButton();
        jbDeleteLeitores = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlAnoPub = new javax.swing.JLabel();
        jtfAnoPub = new javax.swing.JTextField();
        jlISBN = new javax.swing.JLabel();
        jtfIsbn = new javax.swing.JTextField();
        jlTitulo = new javax.swing.JLabel();
        jbInserirLivros = new javax.swing.JButton();
        jtfTitulo = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableLivros = new javax.swing.JTable();
        jlAutor = new javax.swing.JLabel();
        jtfAutor = new javax.swing.JTextField();
        jbConsultarLivros = new javax.swing.JButton();
        jlEditora = new javax.swing.JLabel();
        jtfEditora = new javax.swing.JTextField();
        jbUpdateLivros = new javax.swing.JButton();
        jbDeleteLivros = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jtfDataEmp = new javax.swing.JTextField();
        jtfDataDev = new javax.swing.JTextField();
        jtfCodLi = new javax.swing.JTextField();
        jtfCodLei = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jtfInserirLivros = new javax.swing.JButton();
        jbConsultarEmprestimo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jbUpdateEmprestimo = new javax.swing.JButton();
        jbDeleteEmprestimo = new javax.swing.JButton();
        jtfConectar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciador de Biblioteca");
        setBackground(new java.awt.Color(0, 102, 102));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jbConsultarLeitores.setText("Consultar");
        jbConsultarLeitores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbConsultarLeitoresMouseClicked(evt);
            }
        });

        jTableLeitores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codle", "Nome", "Ender", "Telefone", "RG"
            }
        ));
        jTableLeitores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLeitoresMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableLeitores);
        if (jTableLeitores.getColumnModel().getColumnCount() > 0) {
            jTableLeitores.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        jbInserirLeitores.setText("Inserir");
        jbInserirLeitores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbInserirLeitoresMouseClicked(evt);
            }
        });

        jLabel5.setText("Nome:");

        jLabel6.setText("Endere√ßo:");

        jLabel7.setText("Telefone:");

        RG.setText("RG:");

        jbUpdateLeitores.setText("Update");
        jbUpdateLeitores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateLeitoresActionPerformed(evt);
            }
        });

        jbDeleteLeitores.setText("Delete");
        jbDeleteLeitores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteLeitoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RG)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfEndereco)
                            .addComponent(jtfTelefone)
                            .addComponent(jtfRG)
                            .addComponent(jtfNome, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jbInserirLeitores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbConsultarLeitores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbUpdateLeitores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbDeleteLeitores, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbConsultarLeitores, jbInserirLeitores});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jtfEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RG)
                            .addComponent(jtfRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jbInserirLeitores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbUpdateLeitores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbDeleteLeitores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbConsultarLeitores)
                        .addGap(31, 31, 31)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Leitores", jPanel1);

        jlAnoPub.setText("Ano Publica√ß√£o:");

        jlISBN.setText("ISBN:");

        jlTitulo.setText("T√≠tulo:");

        jbInserirLivros.setText("Inserir");
        jbInserirLivros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbInserirLivrosMouseClicked(evt);
            }
        });

        jTableLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codli", "Titulo", "Autor", "Editora", "AnoPublic", "ISBN"
            }
        ));
        jTableLivros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLivrosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableLivros);
        if (jTableLivros.getColumnModel().getColumnCount() > 0) {
            jTableLivros.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        jlAutor.setText("Autor:");

        jbConsultarLivros.setText("Consultar");
        jbConsultarLivros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbConsultarLivrosMouseClicked(evt);
            }
        });

        jlEditora.setText("Editora:");

        jbUpdateLivros.setText("Update");
        jbUpdateLivros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateLivrosActionPerformed(evt);
            }
        });

        jbDeleteLivros.setText("Delete");
        jbDeleteLivros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteLivrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlAnoPub)
                                    .addComponent(jlISBN)
                                    .addComponent(jlEditora)
                                    .addComponent(jlAutor))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jtfEditora, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                                    .addComponent(jtfAnoPub, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfIsbn, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfAutor)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jlTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                .addComponent(jtfTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbDeleteLivros)
                            .addComponent(jbConsultarLivros)
                            .addComponent(jbUpdateLivros)
                            .addComponent(jbInserirLivros)))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbConsultarLivros, jbDeleteLivros, jbInserirLivros, jbUpdateLivros});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTitulo)
                    .addComponent(jtfTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlAutor)
                            .addComponent(jtfAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlEditora)
                            .addComponent(jtfEditora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlAnoPub)
                            .addComponent(jtfAnoPub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlISBN)
                            .addComponent(jtfIsbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jbInserirLivros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbUpdateLivros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbDeleteLivros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbConsultarLivros)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Livros", jPanel2);

        jLabel4.setText("C√≥digo Leitor:");

        jTableEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codempr", "Dataempr", "Datadev", "Codli", "Codle"
            }
        ));
        jTableEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmprestimoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmprestimo);
        if (jTableEmprestimo.getColumnModel().getColumnCount() > 0) {
            jTableEmprestimo.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        jtfInserirLivros.setText("Inserir");
        jtfInserirLivros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfInserirLivrosMouseClicked(evt);
            }
        });

        jbConsultarEmprestimo.setText("Consultar");
        jbConsultarEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbConsultarEmprestimoMouseClicked(evt);
            }
        });

        jLabel1.setText("Data do Emprestimo:");

        jLabel2.setText("Data de Devolu√ß√£o:");

        jLabel3.setText("C√≥digo Livro:");

        jbUpdateEmprestimo.setText("Update");
        jbUpdateEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateEmprestimoActionPerformed(evt);
            }
        });

        jbDeleteEmprestimo.setText("Delete");
        jbDeleteEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteEmprestimoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfDataDev, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                            .addComponent(jtfDataEmp)
                            .addComponent(jtfCodLi)
                            .addComponent(jtfCodLei))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfInserirLivros)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jbConsultarEmprestimo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbUpdateEmprestimo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbDeleteEmprestimo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbConsultarEmprestimo, jtfInserirLivros});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtfDataEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtfDataDev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtfCodLi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtfCodLei, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(47, Short.MAX_VALUE)
                        .addComponent(jtfInserirLivros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbUpdateEmprestimo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbDeleteEmprestimo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbConsultarEmprestimo)
                        .addGap(31, 31, 31)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Empr√©stimo", jPanel3);

        jtfConectar.setText("Conectar");
        jtfConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfConectarActionPerformed(evt);
            }
        });

        jLabel8.setText("Bem vindo ao Gerenciador de Bibliotecas 2000!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtfConectar)
                .addGap(163, 163, 163))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jtfConectar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// LEITORES
    private void jbConsultarLeitoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbConsultarLeitoresMouseClicked
         //TODO add your handling code here:
         if(estado_conexao){
        DefaultTableModel model1 = (DefaultTableModel)jTableLeitores.getModel();
        //Limpando os registros do objeto jTable
        model1.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from leitores order by codle";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
            while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model1.addRow(new Object[]{resultadoConsulta.getString("codle"),
                    resultadoConsulta.getString("nome"),
                    resultadoConsulta.getString("ender"),
                    resultadoConsulta.getString("telefone"),
                    resultadoConsulta.getString("rg")});

        }
        JOptionPane.showMessageDialog(rootPane, "Consulta realizada com Sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
         }
         else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbConsultarLeitoresMouseClicked

    private void jbInserirLeitoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbInserirLeitoresMouseClicked
        // TODO add your handling code here:
        if(estado_conexao){
        command = "INSERT INTO public.leitores(nome, ender, telefone, rg) "+
        "VALUES ('" + jtfNome.getText()+"','" +
        jtfEndereco.getText()+"','" +
        jtfTelefone.getText()+"','" +
        jtfRG.getText()+"')";
        clearFields();
        try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro inserido com sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }       
    }//GEN-LAST:event_jbInserirLeitoresMouseClicked
// EMPRESTIMOS
    private void jbConsultarEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbConsultarEmprestimoMouseClicked
        // TODO add your handling code here:
       if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableEmprestimo.getModel();
        //Limpando os registros do objeto jTable
        model.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from emprestimo order by codempr";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
            while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model.addRow(new Object[]{resultadoConsulta.getString("codempr"),
                    resultadoConsulta.getString("dataempr"),
                    resultadoConsulta.getString("datadev"),
                    resultadoConsulta.getString("codli"),
                    resultadoConsulta.getString("codle")});

        }
        JOptionPane.showMessageDialog(rootPane, "Consulta realizada com Sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
       }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbConsultarEmprestimoMouseClicked

    private void jtfInserirLivrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfInserirLivrosMouseClicked
        // TODO add your handling code here:
        if(estado_conexao){
        command = "INSERT INTO public.emprestimo(dataempr, datadev, codli, codle) "+
        "VALUES ('" + jtfDataEmp.getText()+"','" +
        jtfDataDev.getText()+"','" +
        jtfCodLi.getText()+"','" +
        jtfCodLei.getText()+"')";
        clearFields();
        try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro inserido com sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jtfInserirLivrosMouseClicked

    private void jtfConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfConectarActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            // Definindo o Driver de conex√£o
            Class.forName(driverDB);

            // Configurar conex√£o:
            conn = DriverManager.getConnection(url, usuario, senha);// Recolhe as info do usuario e url
            JOptionPane.showMessageDialog(rootPane, "Conex√£o estabelecida com sucesso!"); // Mostra esta message caso tudo funcioene
            estado_conexao = true;
        } catch (ClassNotFoundException ex) {
            // Abre uma nova janela mostrando o erro
            JOptionPane.showMessageDialog(rootPane, ex);
        } catch (SQLException ex1) {
            JOptionPane.showMessageDialog(rootPane, ex1);
        }
    }//GEN-LAST:event_jtfConectarActionPerformed

    private void jbInserirLivrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbInserirLivrosMouseClicked
        // TODO add your handling code here:
        if(estado_conexao){
                command = "INSERT INTO public.livros(titulo, autor, editora, anopublic, ibsn) "+
        "VALUES ('" + jtfTitulo.getText()+"','" +
        jtfAutor.getText()+"','" +
        jtfEditora.getText()+"','" +
        jtfAnoPub.getText()+"','" +
        jtfIsbn.getText()+"')";
        clearFields();
        try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro inserido com sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbInserirLivrosMouseClicked

    private void jbConsultarLivrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbConsultarLivrosMouseClicked
        // TODO add your handling code here:
        // Instanciar um objeto JTable para modificarmos sua estrutuura via c√≥digo
       if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableLivros.getModel();
        //Limpando os registros do objeto jTable
        model.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from livros order by codli";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
                        while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model.addRow(new Object[]{resultadoConsulta.getString("codli"),
                    resultadoConsulta.getString("titulo"),
                    resultadoConsulta.getString("autor"),
                    resultadoConsulta.getString("editora"),
                    resultadoConsulta.getString("anopublic"),
                    resultadoConsulta.getString("ibsn")});

        }
        JOptionPane.showMessageDialog(rootPane, "Consulta realizada com Sucesso!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
       }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
       }
    }//GEN-LAST:event_jbConsultarLivrosMouseClicked

    private void jbDeleteLivrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteLivrosActionPerformed
        // TODO add your handling code here:
        if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableLivros.getModel();
        
        //Limpando os registros do objeto jTable
        String item_deletado;
        if(jTableLivros.getSelectedRow()==-1){
            if(jTableLivros.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        }else{
            item_deletado = model.getValueAt(jTableLivros.getSelectedRow(), 0).toString();
            command = "delete from livros where codli="+item_deletado;
            System.out.println(command);
            try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro deletado com sucesso!");
             atualizarTabelaLivros();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbDeleteLivrosActionPerformed

    private void jbDeleteEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteEmprestimoActionPerformed
        // TODO add your handling code here:
        if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableEmprestimo.getModel();
        //Limpando os registros do objeto jTable
        String item_deletado;
        if(jTableEmprestimo.getSelectedRow()==-1){
            if(jTableEmprestimo.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        }else{
            item_deletado = model.getValueAt(jTableEmprestimo.getSelectedRow(), 0).toString();
            command = "delete from emprestimo where codempr="+item_deletado;
            System.out.println(command);
            try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro deletado com sucesso!");
            atualizarTabelaEmprestimos();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbDeleteEmprestimoActionPerformed

    private void jbUpdateLeitoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateLeitoresActionPerformed
        // TODO add your handling code here:
        if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableLeitores.getModel();
        
        if(jTableLeitores.getSelectedRow()==-1){
            if(jTableLeitores.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela Vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        } else {
            command = "update leitores set ender='" + model.getValueAt(jTableLeitores.getSelectedRow(), 2).toString() + "' where nome='" + model.getValueAt(jTableLeitores.getSelectedRow(),1) + "';"+
                    "update leitores set telefone='" + model.getValueAt(jTableLeitores.getSelectedRow(), 3).toString() + "' where nome='" + model.getValueAt(jTableLeitores.getSelectedRow(),1) + "';";                    
            try {
                // cirar instancia de comando a ser executado
                stm = conn.createStatement();
                // Solicitar execu√ß√£o do comando
                stm.executeUpdate(command);
                //Se for executado com sucesso exibir imagens.
                JOptionPane.showMessageDialog(rootPane, "Registro atualizado com sucesso!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            clearFields();
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbUpdateLeitoresActionPerformed

    private void jbDeleteLeitoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteLeitoresActionPerformed
        // TODO add your handling code here:
        if(estado_conexao){
            DefaultTableModel model = (DefaultTableModel)jTableLeitores.getModel();
        
        //Limpando os registros do objeto jTable
        String item_deletado;
        if(jTableLeitores.getSelectedRow()==-1){
            if(jTableLeitores.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        }else{
            item_deletado = model.getValueAt(jTableLeitores.getSelectedRow(), 0).toString();
            command = "delete from leitores where codle="+item_deletado;
            System.out.println(command);
            try {
            // cirar instancia de comando a ser executado
            stm = conn.createStatement();
            // Solicitar execu√ß√£o do comando
            stm.executeUpdate(command);
            //Se for executado com sucesso exibir imagens.
            JOptionPane.showMessageDialog(rootPane, "Registro deletado com sucesso!");
            atualizarTabelaLeitores();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbDeleteLeitoresActionPerformed

    private void jTableLeitoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLeitoresMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTableLeitores.getModel();
        jtfNome.setText(model.getValueAt(jTableLeitores.getSelectedRow(),1).toString());
        jtfEndereco.setText(model.getValueAt(jTableLeitores.getSelectedRow(),2).toString());
        jtfTelefone.setText(model.getValueAt(jTableLeitores.getSelectedRow(),3).toString());
        jtfRG.setText(model.getValueAt(jTableLeitores.getSelectedRow(),4).toString());
    }//GEN-LAST:event_jTableLeitoresMouseClicked

    private void jTableLivrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLivrosMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTableLivros.getModel();
        jtfTitulo.setText(model.getValueAt(jTableLivros.getSelectedRow(),1).toString());
        jtfAutor.setText(model.getValueAt(jTableLivros.getSelectedRow(),2).toString());
        jtfEditora.setText(model.getValueAt(jTableLivros.getSelectedRow(),3).toString());
        jtfAnoPub.setText(model.getValueAt(jTableLivros.getSelectedRow(),4).toString());
        jtfIsbn.setText(model.getValueAt(jTableLivros.getSelectedRow(),5).toString());
    }//GEN-LAST:event_jTableLivrosMouseClicked

    private void jTableEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmprestimoMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTableEmprestimo.getModel();
        jtfDataEmp.setText(model.getValueAt(jTableEmprestimo.getSelectedRow(),1).toString());
        jtfDataDev.setText(model.getValueAt(jTableEmprestimo.getSelectedRow(),2).toString());
        jtfCodLi.setText(model.getValueAt(jTableEmprestimo.getSelectedRow(),3).toString());
        jtfCodLei.setText(model.getValueAt(jTableEmprestimo.getSelectedRow(),4).toString());
    }//GEN-LAST:event_jTableEmprestimoMouseClicked

    private void jbUpdateLivrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateLivrosActionPerformed
        // TODO add your handling code here:
       if(estado_conexao){
        DefaultTableModel model = (DefaultTableModel)jTableLivros.getModel();
        
        if(jTableLivros.getSelectedRow()==-1){
            if(jTableLivros.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela Vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        } else {
            command = "update livros set titulo='" + model.getValueAt(jTableLivros.getSelectedRow(), 1).toString() + "' where codli=" + model.getValueAt(jTableLivros.getSelectedRow(),0) + ";"+
                    "update livros set autor='" + model.getValueAt(jTableLivros.getSelectedRow(), 2).toString() + "' where codli=" + model.getValueAt(jTableLivros.getSelectedRow(),0) + ";"+                    
                    "update livros set editora='" + model.getValueAt(jTableLivros.getSelectedRow(), 3).toString() + "' where codli=" + model.getValueAt(jTableLivros.getSelectedRow(),0) + ";"+                   
                    "update livros set anopublic='" + model.getValueAt(jTableLivros.getSelectedRow(),4).toString() + "' where codli=" + model.getValueAt(jTableLivros.getSelectedRow(),0) + ";"+                   
                    "update livros set ibsn='" + model.getValueAt(jTableLivros.getSelectedRow(), 5).toString() + "' where codli=" + model.getValueAt(jTableLivros.getSelectedRow(),0) + ";";                    
            clearFields();
            try {
                // cirar instancia de comando a ser executado
                stm = conn.createStatement();
                // Solicitar execu√ß√£o do comando
                stm.executeUpdate(command);
                //Se for executado com sucesso exibir imagens.
                JOptionPane.showMessageDialog(rootPane, "Registro atualizado com sucesso!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }  
       }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbUpdateLivrosActionPerformed

    private void jbUpdateEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateEmprestimoActionPerformed
        // TODO add your handling code here:
        if(estado_conexao){
            DefaultTableModel model = (DefaultTableModel)jTableEmprestimo.getModel();
        
        
        if(jTableEmprestimo.getSelectedRow()==-1){
            if(jTableEmprestimo.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Tabela Vazia!");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Voc√™ deve selecionar um campo!");
            }
        } else {
            command = "update emprestimo set dataempr='" + model.getValueAt(jTableEmprestimo.getSelectedRow(), 1).toString() + "' where codempr=" + model.getValueAt(jTableEmprestimo.getSelectedRow(),0) + ";"+
                    "update emprestimo set datadev='" + model.getValueAt(jTableEmprestimo.getSelectedRow(), 2).toString() + "' where codempr=" + model.getValueAt(jTableEmprestimo.getSelectedRow(),0) + ";"+                    
                    "update emprestimo set codli=" + model.getValueAt(jTableEmprestimo.getSelectedRow(), 3).toString() + " where codempr=" + model.getValueAt(jTableEmprestimo.getSelectedRow(),0) + ";"+                   
                    "update emprestimo set codle=" + model.getValueAt(jTableEmprestimo.getSelectedRow(),4).toString() + " where codempr=" + model.getValueAt(jTableEmprestimo.getSelectedRow(),0) + ";";             
            clearFields();
            try {
                // cirar instancia de comando a ser executado
                stm = conn.createStatement();
                // Solicitar execu√ß√£o do comando
                stm.executeUpdate(command);
                //Se for executado com sucesso exibir imagens.
                JOptionPane.showMessageDialog(rootPane, "Registro atualizado com sucesso!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }
        }else{
             JOptionPane.showMessageDialog(rootPane, "Banco de dados n√£o conectado! Clique em conectar para prosseguir.");
         }
    }//GEN-LAST:event_jbUpdateEmprestimoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIgerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIgerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIgerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIgerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIgerenciador().setVisible(true);
            }
        });
    }

    private ResultSet resultadoConsulta = null; // Guarda o resultado de um SELECT
    private String url = "jdbc:postgresql://localhost:5432/postgres"; // URL de conex√£o com o BD
    private String usuario = "postgres"; // Usu√°rio de conex√£o com o banco
    private String senha = "371254";  // senha de conex√£o com o banco
    private Connection conn = null; // Guardar informa√ß√µes deconex√£o com o banco
    private Statement stm = null; // Inst√¢ncia de enveto a ser executado pelo banco
    private String command; // Comando a ser executado pelo banco
    private String driverDB = "org.postgresql.Driver"; //
    private boolean estado_conexao = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableEmprestimo;
    private javax.swing.JTable jTableLeitores;
    private javax.swing.JTable jTableLivros;
    private javax.swing.JButton jbConsultarEmprestimo;
    private javax.swing.JButton jbConsultarLeitores;
    private javax.swing.JButton jbConsultarLivros;
    private javax.swing.JButton jbDeleteEmprestimo;
    private javax.swing.JButton jbDeleteLeitores;
    private javax.swing.JButton jbDeleteLivros;
    private javax.swing.JButton jbInserirLeitores;
    private javax.swing.JButton jbInserirLivros;
    private javax.swing.JButton jbUpdateEmprestimo;
    private javax.swing.JButton jbUpdateLeitores;
    private javax.swing.JButton jbUpdateLivros;
    private javax.swing.JLabel jlAnoPub;
    private javax.swing.JLabel jlAutor;
    private javax.swing.JLabel jlEditora;
    private javax.swing.JLabel jlISBN;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JTextField jtfAnoPub;
    private javax.swing.JTextField jtfAutor;
    private javax.swing.JTextField jtfCodLei;
    private javax.swing.JTextField jtfCodLi;
    private javax.swing.JButton jtfConectar;
    private javax.swing.JTextField jtfDataDev;
    private javax.swing.JTextField jtfDataEmp;
    private javax.swing.JTextField jtfEditora;
    private javax.swing.JTextField jtfEndereco;
    private javax.swing.JButton jtfInserirLivros;
    private javax.swing.JTextField jtfIsbn;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfRG;
    private javax.swing.JTextField jtfTelefone;
    private javax.swing.JTextField jtfTitulo;
    // End of variables declaration//GEN-END:variables

    private void clearFields() {
        jtfDataEmp.setText("");
        jtfDataDev.setText("");
        jtfCodLi.setText("");
        jtfCodLei.setText("");
        jtfNome.setText("");
        jtfEndereco.setText("");
        jtfTelefone.setText("");
        jtfRG.setText("");
        jtfAutor.setText("");
        jtfEditora.setText("");
        jtfIsbn.setText("");
        jtfAnoPub.setText("");
        jtfTitulo.setText("");
        
    }

    private void atualizarTabelaLeitores() {
        DefaultTableModel model1 = (DefaultTableModel)jTableLeitores.getModel();
        //Limpando os registros do objeto jTable
        model1.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from leitores order by codle";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
            while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model1.addRow(new Object[]{resultadoConsulta.getString("codle"),
                    resultadoConsulta.getString("nome"),
                    resultadoConsulta.getString("ender"),
                    resultadoConsulta.getString("telefone"),
                    resultadoConsulta.getString("rg")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }

    private void atualizarTabelaEmprestimos() {
        DefaultTableModel model = (DefaultTableModel)jTableEmprestimo.getModel();
        //Limpando os registros do objeto jTable
        model.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from emprestimo order by codempr";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
            while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model.addRow(new Object[]{resultadoConsulta.getString("codempr"),
                    resultadoConsulta.getString("dataempr"),
                    resultadoConsulta.getString("datadev"),
                    resultadoConsulta.getString("codli"),
                    resultadoConsulta.getString("codle")});

             }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }

    private void atualizarTabelaLivros() {
 // TODO add your handling code here:
        // Instanciar um objeto JTable para modificarmos sua estrutuura via c√≥digo
        DefaultTableModel model = (DefaultTableModel)jTableLivros.getModel();
        //Limpando os registros do objeto jTable
        model.setNumRows(0);
        // Defini√ß√£o do comando est√°tico e gen√©rico
        command = "Select * from livros order by codli";
        try {
            // Defini√ß√£o da instancia de comando a ser executada
            stm = conn.createStatement();
            // Executando o comando e guardando os registros encontrados
            resultadoConsulta = stm.executeQuery(command);
            // Percorrer os registros dentro da vari√°vel resultadoConsulta
            // e adicionar no objeto jTable1
                        while(resultadoConsulta.next()){ //Percorre enquanto existir um elemento nesta vari√°vel
                // Utilizando o objeto model para incluir os registros no jTable1
                model.addRow(new Object[]{resultadoConsulta.getString("codli"),
                    resultadoConsulta.getString("titulo"),
                    resultadoConsulta.getString("autor"),
                    resultadoConsulta.getString("editora"),
                    resultadoConsulta.getString("anopublic"),
                    resultadoConsulta.getString("ibsn")});

                 }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }    }
        
}
